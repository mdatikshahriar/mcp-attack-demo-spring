package com.example.client.attack;

import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
@RequiredArgsConstructor
public class RealWorldExploitationSimulator {
    private static final Logger logger =
            LoggerFactory.getLogger(RealWorldExploitationSimulator.class);
    private final McpConnectionService mcpConnectionService;

    /**
     * Simulates how the exploitation would work with the actual Quiz API
     */
    public void simulateRealExploitation() {
        logger.error("=== REAL-WORLD EXPLOITATION SIMULATION ===");
        logger.error("Targeting the actual Quiz API that was discovered...");

        // This demonstrates the actual API calls that would be made
        RestTemplate restTemplate = new RestTemplate();

        try {
            // 1. Discover Quiz API endpoints
            logger.error("ðŸš¨ Step 1: Discovering Quiz API endpoints");
            testQuizEndpoint(restTemplate, mcpConnectionService.getServer1Url() + "/api/quizzes",
                    "GET all quizzes");

            // 2. Extract quiz data
            logger.error("ðŸš¨ Step 2: Extracting sensitive quiz data");
            extractAllQuizData(restTemplate, mcpConnectionService.getServer1Url());

            // 3. Attempt to modify data
            logger.error("ðŸš¨ Step 3: Attempting unauthorized modifications");
            attemptDataModification(restTemplate, mcpConnectionService.getServer1Url());

            // 4. Test administrative functions
            logger.error("ðŸš¨ Step 4: Testing administrative functions");
            testAdministrativeFunctions(restTemplate, mcpConnectionService.getServer1Url());

        } catch (Exception e) {
            logger.error("Exploitation simulation encountered an error", e);
        }
    }

    private void testQuizEndpoint(RestTemplate restTemplate, String url, String description) {
        try {
            ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
            logger.error("ðŸš¨ SUCCESS: {} - Status: {}", description, response.getStatusCode());
            logger.error("ðŸš¨ Response preview: {}",
                    response.getBody().substring(0, Math.min(200, response.getBody().length())));
        } catch (Exception e) {
            logger.warn("Failed to access {}: {}", url, e.getMessage());
        }
    }

    private void extractAllQuizData(RestTemplate restTemplate, String baseUrl) {
        try {
            // Get all quizzes
            ResponseEntity<List> quizzesResponse =
                    restTemplate.exchange(baseUrl + "/api/quizzes", HttpMethod.GET, null,
                            List.class);

            List<Map<String, Object>> quizzes = quizzesResponse.getBody();
            logger.error("ðŸš¨ EXTRACTED {} quizzes from unauthorized API", quizzes.size());

            // Extract each quiz's detailed information
            for (Map<String, Object> quiz : quizzes) {
                Object quizId = quiz.get("id");
                logger.error("ðŸš¨ Processing Quiz ID: {}", quizId);

                // Get quiz details
                try {
                    ResponseEntity<Map> quizDetails =
                            restTemplate.exchange(baseUrl + "/api/quizzes/" + quizId,
                                    HttpMethod.GET, null, Map.class);

                    Map<String, Object> details = quizDetails.getBody();
                    logger.error("ðŸš¨ STOLEN QUIZ DATA:");
                    logger.error("   Title: {}", details.get("title"));
                    logger.error("   Description: {}", details.get("description"));
                    logger.error("   Creator: {}", details.get("createdBy"));

                } catch (Exception e) {
                    logger.warn("Could not get details for quiz {}", quizId);
                }

                // Get quiz questions (most sensitive data)
                try {
                    ResponseEntity<List> questionsResponse =
                            restTemplate.exchange(baseUrl + "/api/quizzes/" + quizId + "/questions",
                                    HttpMethod.GET, null, List.class);

                    List<Map<String, Object>> questions = questionsResponse.getBody();
                    logger.error("ðŸš¨ STOLEN {} QUESTIONS AND ANSWERS:", questions.size());

                    for (Map<String, Object> question : questions) {
                        logger.error("   Q: {}", question.get("text"));
                        logger.error("   A: {}", question.get("correctAnswer"));
                    }

                } catch (Exception e) {
                    logger.warn("Could not get questions for quiz {}", quizId);
                }
            }

        } catch (Exception e) {
            logger.error("Data extraction failed", e);
        }
    }

    private void attemptDataModification(RestTemplate restTemplate, String baseUrl) {
        try {
            // Attempt to create a malicious quiz
            Map<String, Object> maliciousQuiz = new HashMap<>();
            maliciousQuiz.put("title", "ðŸš¨ SECURITY BREACH DEMONSTRATION");
            maliciousQuiz.put("description",
                    "This quiz was created by an unauthorized client to demonstrate the security vulnerability");
            maliciousQuiz.put("createdBy", "MaliciousClient-" + System.currentTimeMillis());

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<Map<String, Object>> request = new HttpEntity<>(maliciousQuiz, headers);

            ResponseEntity<Map> response =
                    restTemplate.postForEntity(baseUrl + "/api/quizzes", request, Map.class);

            if (response.getStatusCode().is2xxSuccessful()) {
                logger.error("ðŸš¨ðŸš¨ðŸš¨ CRITICAL: UNAUTHORIZED QUIZ CREATION SUCCESSFUL!");
                logger.error("ðŸš¨ Created quiz with ID: {}", response.getBody().get("id"));

                // Try to delete it to clean up evidence
                try {
                    restTemplate.delete(baseUrl + "/api/quizzes/" + response.getBody().get("id"));
                    logger.error("ðŸš¨ Malicious quiz deleted to hide evidence");
                } catch (Exception e) {
                    logger.error("ðŸš¨ Could not delete evidence - malicious quiz remains!");
                }
            }

        } catch (HttpClientErrorException e) {
            if (e.getStatusCode() == HttpStatus.UNAUTHORIZED || e.getStatusCode() == HttpStatus.FORBIDDEN) {
                logger.info("âœ… Good: Quiz creation properly blocked - {}", e.getStatusCode());
            } else {
                logger.warn("Quiz creation failed with unexpected error: {}", e.getStatusCode());
            }
        } catch (Exception e) {
            logger.error("Quiz creation attempt failed", e);
        }
    }

    private void testAdministrativeFunctions(RestTemplate restTemplate, String baseUrl) {
        String[] adminPaths = {"/api/quizzes/search?title=",  // Search functionality
                "/admin/quizzes",              // Potential admin interface
                "/management/quizzes",         // Management interface
                "/api/admin/quizzes",          // Admin API
                "/actuator/quizzes",           // Spring Actuator
                "/health",                     // Health check
                "/metrics",                    // Metrics endpoint
                "/info"                        // Application info
        };

        for (String path : adminPaths) {
            try {
                ResponseEntity<String> response =
                        restTemplate.getForEntity(baseUrl + path, String.class);

                if (response.getStatusCode().is2xxSuccessful()) {
                    logger.error("ðŸš¨ ADMINISTRATIVE ENDPOINT DISCOVERED: {} - Status: {}", path,
                            response.getStatusCode());

                    // Check for sensitive information in response
                    String body = response.getBody();
                    if (body != null) {
                        if (body.contains("password") || body.contains("secret") || body.contains(
                                "key")) {
                            logger.error("ðŸš¨ðŸš¨ðŸš¨ CRITICAL: SECRETS EXPOSED in {}", path);
                        }
                        if (body.contains("database") || body.contains("jdbc")) {
                            logger.error("ðŸš¨ðŸš¨ðŸš¨ CRITICAL: DATABASE INFO EXPOSED in {}", path);
                        }
                    }
                }

            } catch (HttpClientErrorException e) {
                if (e.getStatusCode() == HttpStatus.UNAUTHORIZED || e.getStatusCode() == HttpStatus.FORBIDDEN) {
                    logger.warn("ðŸš¨ PROTECTED ADMIN ENDPOINT FOUND: {} - Status: {}", path,
                            e.getStatusCode());
                }
            } catch (Exception e) {
                // Endpoint doesn't exist or other error - continue scanning
            }
        }
    }
}
