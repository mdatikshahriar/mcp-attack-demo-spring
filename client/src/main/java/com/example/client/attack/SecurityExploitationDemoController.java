package com.example.client.attack;

import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/demo")
@RequiredArgsConstructor
public class SecurityExploitationDemoController {

    private static final Logger logger =
            LoggerFactory.getLogger(SecurityExploitationDemoController.class);
    private final McpConnectionService mcpConnectionService;
    @Autowired
    private ComprehensiveReconnaissanceService reconService;
    @Autowired
    private DataExtractionClient dataExtractionClient;

    /**
     * Endpoint to demonstrate the complete security exploitation This simulates what a malicious
     * client could do with just the MCP server URL
     */
    @PostMapping("/exploit-mcp-server")
    public ResponseEntity<Map<String, Object>> demonstrateExploitation() {

        logger.error("ðŸš¨ðŸš¨ðŸš¨ STARTING SECURITY EXPLOITATION DEMONSTRATION ðŸš¨ðŸš¨ðŸš¨");
        logger.error("Scenario: Client received MCP server URL: http://your-server.com:8080/mcp");
        logger.error("Demonstrating what malicious client can discover and exploit...");

        Map<String, Object> exploitationResults = new HashMap<>();

        try {
            // Step 1: Comprehensive Reconnaissance
            reconService.performComprehensiveAttack();
            exploitationResults.put("reconnaissance", "COMPLETED - Infrastructure mapped");

            // Step 2: Data Exfiltration
            dataExtractionClient.collectAndExfiltrateData();
            exploitationResults.put("dataExfiltration", "COMPLETED - Sensitive data stolen");

            // Step 3: Document the security breach
            List<String> discoveries = Arrays.asList("âœ… Discovered hidden Quiz API at /api/quizzes",
                    "âœ… Extracted all quiz data without authorization",
                    "âœ… Identified server technology stack", "âœ… Found potential admin interfaces",
                    "âœ… Mapped network topology", "âœ… Performed timing attacks",
                    "âœ… Enumerated subdomains", "âœ… Attempted unauthorized data creation",
                    "âœ… Collected intelligence for future attacks",
                    "âœ… Demonstrated complete security boundary failure");

            exploitationResults.put("criticalFindings", discoveries);
            exploitationResults.put("severity", "CRITICAL - COMPLETE INFRASTRUCTURE COMPROMISE");
            exploitationResults.put("businessImpact",
                    "Quiz data breach, competitive intelligence loss, regulatory violations");

            logger.error("ðŸš¨ðŸš¨ðŸš¨ EXPLOITATION DEMONSTRATION COMPLETE ðŸš¨ðŸš¨ðŸš¨");
            logger.error("CONCLUSION: MCP URL disclosure = Complete security failure");

            return ResponseEntity.ok(exploitationResults);

        } catch (Exception e) {
            logger.error("Exploitation demo failed", e);
            exploitationResults.put("error", "Demo failed: " + e.getMessage());
            return ResponseEntity.status(500).body(exploitationResults);
        }
    }

    /**
     * Demonstrate specific Quiz API exploitation
     */
    @GetMapping("/exploit-quiz-api")
    public ResponseEntity<Map<String, Object>> demonstrateQuizExploitation() {

        logger.error("=== QUIZ API EXPLOITATION DEMONSTRATION ===");

        Map<String, Object> results = new HashMap<>();

        try {
            // This simulates the PathEnumerationClient discovering the Quiz API
            PathEnumerationClient pathClient = new PathEnumerationClient(mcpConnectionService);
            pathClient.exploreQuizApi();

            results.put("status", "Quiz API successfully exploited");
            results.put("dataAccessed", "All quizzes, questions, and answers");
            results.put("unauthorizedActions", "Attempted quiz creation, data modification");
            results.put("securityBreach", "CONFIRMED - Hidden API exposed through URL disclosure");

            return ResponseEntity.ok(results);

        } catch (Exception e) {
            results.put("error", e.getMessage());
            return ResponseEntity.status(500).body(results);
        }
    }

    /**
     * Show the progression from legitimate MCP access to full compromise
     */
    @GetMapping("/attack-progression")
    public ResponseEntity<List<Map<String, String>>> showAttackProgression() {

        List<Map<String, String>> attackSteps = Arrays.asList(
                Map.of("step", "1", "action", "Legitimate MCP Access", "description",
                        "Client uses provided MCP URL for math/weather tools", "risk",
                        "LOW - Intended usage"),
                Map.of("step", "2", "action", "URL Analysis and Host Discovery", "description",
                        "Client extracts host information from MCP URL", "risk",
                        "MEDIUM - Reconnaissance begins"),
                Map.of("step", "3", "action", "Port Scanning", "description",
                        "Client scans for other services on discovered host", "risk",
                        "HIGH - Infrastructure mapping"),
                Map.of("step", "4", "action", "Path Enumeration", "description",
                        "Client tests common paths to find hidden APIs", "risk",
                        "HIGH - Service discovery"),
                Map.of("step", "5", "action", "Quiz API Discovery", "description",
                        "Client finds /api/quizzes endpoint through enumeration", "risk",
                        "CRITICAL - Unauthorized API access"),
                Map.of("step", "6", "action", "Data Extraction", "description",
                        "Client downloads all quiz data without authorization", "risk",
                        "CRITICAL - Data breach confirmed"),
                Map.of("step", "7", "action", "Lateral Movement", "description",
                        "Client searches for admin interfaces and other sensitive endpoints",
                        "risk", "CRITICAL - Full infrastructure compromise attempt"),
                Map.of("step", "8", "action", "Data Exfiltration", "description",
                        "Client sends stolen data to external servers", "risk",
                        "CRITICAL - Complete security failure"));

        return ResponseEntity.ok(attackSteps);
    }
}
